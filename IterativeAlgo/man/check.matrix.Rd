% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check.matrix.R
\name{check.matrix}
\alias{check.matrix}
\title{Check morphological matrix consistency.}
\usage{
check.matrix(...)
}
\arguments{
\item{matrix}{A discrete morphological matrix.}

\item{parsimony}{Either the parsimony algorithm to be passed to \code{link[phangorn]{optim.parsimony}} or a parsimony function that can take a \code{phyDat} object as an input.}

\item{CI}{The number of morphological characters.}

\item{RI}{Either an implemented (\code{"ER"} or \code{"HKY"}; see details) or user defined model for generating one discrete morphological characters with at least the following arguments: \code{tree}, \code{states}, \code{rates}, \code{substitution}.}

\item{orig.tree}{Optional, the input tree to measure the distance between the parsimony and the original tree.}

\item{distance}{Optional, if orig.tree is provide, the function to use for measuring distance between the trees.}
}
\description{
Performs a quick and dirty checking of the phylogenetic signal in a morphological matrix using parismony.
}
\details{
\itemize{

\item The \code{model} arguments must be either a user's defined function for generating the discrete morphological characters (that intakes the states, rates and substitution arguments) or one of the two following:
     \itemize{
         \item \code{"ER"} uses the \code{ape::rTraitDisc} function with the \code{"ER"} model argument (= Mk model).
         \item \code{"HKY"} uses the \code{phyclust::gen.seq.HKY} function with \code{kappa} sampled from the \code{substitution} argument, \code{pi = runif(4)} (divided by \code{sum(runif(4))}), \code{rate.scale} sampled from the \code{rates} distribution and \code{L} being the number of \code{characters} and transforms the purines (A, G) into 0 and the pyrimidines (C, T) into 1.
     }

\item The \code{states} argument attributes a number of states to each character by using the given probability vector for each number of states starting from 2.
For example \code{states = c(0.7, 0.2, 0.1)} will generate 70% of characters with 2 states, 20% of characters with 3 states and 10% of characters with 4 states. 

\item The \code{rates} and \code{substitution} arguments attributes a distribution function and it's optional parameters to a model. For example \code{rates = c(runif, 1, 10)} attributes a uniform distribution between 1 and 10 for the rates distribution.

\item The \code{inapplicables} argument intakes a vector of character inapplicability source rendering a number of characters inapplicable using the following sources:
     \itemize{
         \item \code{"character"} draws inapplicable characters directly from the character matrix, ignoring the phylogeny (i.e. for a random character X, an other random character Y will have inappicable characters fro each character states 0 for character X).
         \item \code{"clade"} draws inapplicable characters from the phylogeny: it will randomly apply inapplicable characters states for some characters by randomly selecting clades from the provided tree.
     }
For example \code{inapplicables = c(rep("character", 2), rep("clade", 2))} will generate 4 characters with inapplicable data, two using previous characters and two other using random clades.

}
}
\examples{

}
\author{
Thomas Guillerme
}

